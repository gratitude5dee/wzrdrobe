import { fal } from "@fal-ai/client"
import { NextResponse } from "next/server"

if (!process.env.FAL_KEY) {
  throw new Error("FAL_KEY environment variable is not set")
}

fal.config({
  credentials: process.env.FAL_KEY,
})

export const runtime = "edge"

export async function POST(request: Request) {
  try {
    const data = await request.formData()
    const tryOnItem = data.get("tryOnItem") as string
    const referenceImage = data.get("referenceImage") as File
    const garmentImage = (data.get("garmentImage") as File) || null
    const negativePrompt = data.get("negativePrompt") as string

    console.log("API received:", {
      tryOnItem: tryOnItem ? "Present" : "Missing",
      referenceImage: referenceImage ? `${referenceImage.name} (${referenceImage.size} bytes)` : "Missing",
      garmentImage: garmentImage ? `${garmentImage.name} (${garmentImage.size} bytes)` : "Using text prompt",
      negativePrompt: negativePrompt ? "Present" : "Missing",
    })

    if (!referenceImage || !(referenceImage instanceof File) || referenceImage.size === 0) {
      return NextResponse.json({ error: "Valid human image is required" }, { status: 400 })
    }

    try {
      // Upload the human reference image to Fal storage
      console.log("Uploading human image to Fal storage...")
      const humanImageUrl = await fal.storage.upload(referenceImage)
      console.log("Human image uploaded successfully:", humanImageUrl)

      let garmentImageUrl = ""

      // If garment image is provided, upload it
      if (garmentImage && garmentImage instanceof File && garmentImage.size > 0) {
        console.log("Uploading garment image to Fal storage...")
        garmentImageUrl = await fal.storage.upload(garmentImage)
        console.log("Garment image uploaded successfully:", garmentImageUrl)
      } else if (!tryOnItem) {
        return NextResponse.json(
          { error: "Either a garment image or a try-on item description is required" },
          { status: 400 },
        )
      }

      const input: any = {
        human_image_url: humanImageUrl,
      }

      // Use either garment image or text prompt
      if (garmentImageUrl) {
        input.garment_image_url = garmentImageUrl
      } else {
        // For text-based try-on, we'd need to adapt this based on the actual API
        // This is a placeholder and may need adjustment based on the actual API
        input.garment_description = tryOnItem
      }

      console.log("Calling Fal API with parameters:", input)

      const result = await fal.subscribe("fal-ai/kling/v1-5/kolors-virtual-try-on", {
        input,
        logs: true,
        onQueueUpdate: (update) => {
          if (update.status === "IN_PROGRESS") {
            console.log(
              "Queue update:",
              update.logs.map((log) => log.message),
            )
          }
        },
      })

      console.log("Fal API response received:", result)

      if (!result?.data?.image?.url) {
        console.error("No image in response:", result)
        return NextResponse.json({ error: "No image was generated by the API" }, { status: 500 })
      }

      return NextResponse.json({
        image: result.data.image,
        tryOnItem: tryOnItem || "Custom garment",
      })
    } catch (error) {
      console.error("Fal.ai API error:", error)
      return NextResponse.json(
        {
          error: `Failed to process with Fal.ai API: ${error instanceof Error ? error.message : "Unknown error"}`,
        },
        { status: 500 },
      )
    }
  } catch (error) {
    console.error("Server error:", error)
    return NextResponse.json(
      { error: `Internal server error: ${error instanceof Error ? error.message : "Unknown error"}` },
      { status: 500 },
    )
  }
}
